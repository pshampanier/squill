/**
 * Highlight.js Dark Theme
 * 
 * https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html
 */
.hljs {
  background: rgb(31 41 55 / var(--tw-bg-opacity));
  color: #cccccc;

  .linenumber {
    color: #858585;
    user-select: none;
  }
}

/* keyword: keyword in a regular Algol-style language */
.hljs-keyword {
  color: #569cd6; /* keyword */
}

/* built_in: built-in or library object (constant, class, function) */
.hljs-built_in {
  color: #aa759f; /* predefined.sql */
}

/* type: data type (in a language with syntactically significant types) (string, int, array, etc.) */
.hljs-type {
  color: #3dc9b0; /* type */
}

/* literal: special identifier for a built-in value (true, false, null, etc.) */
.hljs-literal {
  color: #aa759f; /* predefined.sql */
}

/* number: number, including units and modifiers, if any. */
.hljs-number {
  color: #b5cea8; /* number */
}

/* operator: operators: +, -, >>, |, == */
.hljs-operator {
  color: #778899; /* operator.sql */
}

/* punctuation: aux. punctuation that should be subtly highlighted (parentheses, brackets, etc.) */
.hljs-punctuation {
  color: #ffd700;
}

/* property: object property obj.prop1.prop2.value */
.hljs-property {
  color: #9cdcfe; /* string.key.json */
}

/* regexp: literal regular expression */
.hljs-regexp {
  color: #b46695; /* regexp */
}

/* string: literal string, character */
.hljs-string {
  color: #a5d6ff; /* string.sql */
}

/* char.escape: an escape character such as \n */
.hljs-char.escape {
  color: currentColor;
}

/* subst: parsed section inside a literal string */
.hljs-subst {
  color: currentColor;
}

/* symbol: symbolic constant, interned string, goto label */
.hljs-symbol {
  color: currentColor;
}

/* class: deprecated You probably want title.class */
.hljs-class {
  color: currentColor;
}

/* function: deprecated You probably want title.function */
.hljs-function {
  color: currentColor;
}

/* variable: variables */
.hljs-variable {
  color: #74b0df; /* variable */
}

/* variable.language: variable with special meaning in a language, e.g.: this, window, super, self, etc. */
.hljs-variable.language {
  color: #569cd6; /* keyword */
}

/* variable.constant: variable that is a constant value, ie MAX_FILES */
.hljs-variable.constant {
  color: #569cd6; /* constant */
}

/* title: name of a class or a function */
.hljs-title {
  color: currentColor;
}

/* title.class: name of a class (interface, trait, module, etc) */
.hljs-title.class {
  color: currentColor;
}

/* title.class.inherited: name of class being inherited from, extended, etc. */
.hljs-title.class.inherited {
  color: currentColor;
}

/* title.function: name of a function */
.hljs-title.function {
  color: currentColor;
}

/* title.function.invoke: name of a function (when being invoked) */
.hljs-title.function.invoke {
  color: currentColor;
}

/* params: block of function arguments (parameters) at the place of declaration */
.hljs-params {
  color: #ffd700;
}

/* comment: comments */
.hljs-comment {
  color: #608b4e;
}

/* doctag: documentation markup within comments, e.g. @params */
.hljs-doctag {
  color: currentColor;
}
