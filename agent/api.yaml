openapi: "3.0.0"
info:
  version: "0.1.0"
  title: "Squill Agent REST API"
  description: The REST API used by the Squill Client to interact with the Agent.

paths:
  /agent:
    get:
      summary: Agent info.
      description: Get the information about the running agent.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "401":
          description: Unauthorized

  /auth/logon:
    post:
      summary: Logon a user.
      description: |
        Logon a user and returns an authentication token.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityToken"
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout a user.
      description: |
        This endpoint is used to logout a user, i.e. to invalidate the security and refresh tokens.
        While the Authorization header is required, this endpoint will not return a 403 Forbidden if the
        tokens are invalid or expired. Instead, it will return a 200 OK since the goal is only to 
        invalidate the tokens. Nevertheless if the `Authorization` header is missing or syntactically
        wrong, a 400 Bad Request will be returned.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/refresh-token:
    post:
      summary: Generate a new security token from a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityToken"
        "401":
          description: Unauthorized

  /connections/defaults:
    get:
      summary: Get a connection defaults values.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

  /connections/{id}:
    get:
      summary: Get a connection from its identifier.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

        "404":
          description: Connection not found

  /connections/test:
    post:
      summary: Test a connection.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connection"
      responses:
        "200":
          description: Successful operation
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/list:
    get:
      summary: List all catalog entries for the specified `username` and `catalog_id`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "404":
          description: Catalog ID not found
        "401":
          description: Unauthorized

  /users/{username}/catalog/list:
    get:
      summary: List all root catalog entries for the specified `username`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog:
    post:
      summary: Create a new resource in the catalog.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: x-resource-type
          in: header
          required: true
          schema:
            enum:
              - connection
              - environment
              - folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Connection"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/rename:
    post:
      summary: Rename a catalog entry for the specified `username` and `path`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "400":
          description: Invalid Request
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Catalog entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable Entity

  /users/{username}/settings:
    post:
      summary: Save the user settings.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Path not found
        "401":
          description: Unauthorized

  /users/{username}/user:
    get:
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "401":
          description: Unauthorized

components:
  schemas:
    Agent:
      description: Description of the agent.
      x-namespace: agent
      type: object
      required:
        - version
      properties:
        version:
          type: string

    Authentication:
      x-namespace: auth
      type: object
      required:
        - method
        - credentials
      properties:
        method:
          type: string
          enum:
            - user_password
        credentials:
          type: object
          properties:
            username:
              $ref: "#/components/schemas/Username"
            password:
              type: string
          required:
            - username
            - password

    User:
      description: A user that can logon to the system.
      type: object
      required:
        - username
      properties:
        username:
          type: string

    Connection:
      description: A connection to a datasource.
      type: object
      required:
        - id
      properties:
        id:
          type: string

    Error:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          description: The HTTP status code
          type: number
        code:
          description: A machine readable error code such as `invalid_parameter`.
          type: string
        message:
          description: A human readable error message
          type: string

    RefreshToken:
      description: The request body of the POST /auth/refresh-token endpoint.
      x-namespace: auth
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token

    Rename:
      description: The request body of the POST /users/:username/catalog endpoint.
      type: object
      properties:
        new_name:
          type: string
      required:
        - new_name

    ResourceRef:
      description: A reference to a resource.
      type: object
      properties:
        id:
          type: string
          format: uuid
        parent_id:
          type: string
          format: uuid
        owner_user_id:
          type: string
          format: uuid
        name:
          type: string
        resource_type:
          type: string
          enum:
            - connection
            - environment
            - folder
            - user
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - owner_user_id
        - name

    SecurityToken:
      description: A security token used for authentication.
      x-namespace: auth
      type: object
      properties:
        token:
          type: string
        token_type:
          type: string
          enum:
            - Bearer
        refresh_token:
          type: string
        expires_in:
          type: number
        user_id:
          type: string

    Username:
      description: A username
      type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key

    BearerAuth:
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: []
  - BearerAuth: []
