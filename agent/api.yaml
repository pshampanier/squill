openapi: "3.0.0"
info:
  version: "0.1.0"
  title: "Squill Agent REST API"
  description: The REST API used by the Squill Client to interact with the Agent.

paths:
  /agent:
    get:
      summary: Agent info.
      description: Get the information about the running agent.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "401":
          description: Unauthorized

  /auth/logon:
    post:
      summary: Logon a user.
      description: |
        Logon a user and returns an authentication token.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityTokens"
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout a user.
      description: |
        This endpoint is used to logout a user, i.e. to invalidate the security and refresh tokens.
        While the Authorization header is required, this endpoint will not return a 403 Forbidden if the
        tokens are invalid or expired. Instead, it will return a 200 OK since the goal is only to 
        invalidate the tokens. Nevertheless if the `Authorization` header is missing or syntactically
        wrong, a 400 Bad Request will be returned.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/refresh-token:
    post:
      summary: Generate a new security token from a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityTokens"
        "401":
          description: Unauthorized

  /connections/defaults:
    get:
      summary: Get a connection defaults values.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

  /connections/describe:
    get:
      summary: Get the description of the connection.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionDescription"

        "401":
          description: Unauthorized

  /connections/describe/datasources:
    get:
      summary: List the datasources available for the connection.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionDescription"

        "401":
          description: Unauthorized

        "404":
          description: Connection not found"

  /connections/{id}:
    get:
      summary: Get a connection from its identifier.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

        "404":
          description: Connection not found

  /connections/{id}/execute:
    post:
      summary: Execute one or more queries on the connection.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: x-origin
          description: The origin of the request ('terminal', 'worksheet', etc).
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          plain/text:
            schema:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "401":
          description: Unauthorized

  /connections/{id}/history:
    get:
      summary: List the queries in the history of the connection.
      operationId: listQueryHistory
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: x-origin
          description: The origin of the request ('terminal', 'worksheet', etc).
          in: header
          required: true
          schema:
            type: string
        - name: page
          description: |
            The pagination information retrieved from the previous call.
            This is used to retrieve the next page of the history if the number of queries is too large to be fulfilled
            by the previous calls.
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryHistoryPage"
        "401":
          description: Unauthorized

  /connections/{id}/history/{query_id}:
    delete:
      summary: Remove the query from the history.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: query_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "401":
          description: Unauthorized
        "404":
          description: Query not found

  /connections/{id}/history/{query_id}/data:
    get:
      summary: Get the data of a query execution.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: query_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "401":
          description: Unauthorized
        "404":
          description: Query not found

  /connections/test:
    post:
      summary: Test a connection.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connection"
      responses:
        "200":
          description: Successful operation
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/list:
    get:
      summary: List all catalog entries for the specified `username` and `catalog_id`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "404":
          description: Catalog ID not found
        "401":
          description: Unauthorized

  /users/{username}/catalog/list:
    get:
      summary: List all root catalog entries for the specified `username`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog:
    post:
      summary: Create a new resource in the catalog.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: x-resource-type
          in: header
          required: true
          schema:
            enum:
              - connection
              - environment
              - collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Connection"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/rename:
    post:
      summary: Rename a catalog entry for the specified `username` and `path`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "400":
          description: Invalid Request
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Catalog entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable Entity

  /users/{username}/settings:
    post:
      summary: Save the user settings.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Path not found
        "401":
          description: Unauthorized

  /users/{username}/user:
    get:
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "401":
          description: Unauthorized

components:
  schemas:
    Agent:
      description: Description of the agent.
      type: object
      required:
        - version
      properties:
        version:
          type: string

    AuthenticationMethod:
      type: string
      enum:
        - user_password

    Authentication:
      type: object
      required:
        - method
        - credentials
      properties:
        method:
          $ref: "#/components/schemas/AuthenticationMethod"
        credentials:
          $ref: "#/components/schemas/Credentials"

    Credentials:
      description: The credentials used to authenticate a user.
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          type: string
      required:
        - username

    User:
      description: A user that can logon to the system.
      type: object
      required:
        - username
      properties:
        username:
          type: string

    DriverCapabilities:
      description: The description of the capabilities of a driver.
      type: string
      oneOf:
        - title: sql
          description: The driver is capable of executing SQL queries.
        - title: auth_user_password
          description: The driver is capable of authenticating users using a username and password.
        - title: auth_password
          description: The driver is capable of authenticating users using a password only.
        - title: connect_string
          description: The driver is capable of connecting to a datasource using a connection string.
        - title: connect_host
          description: The driver is capable of connecting host-based data source.
        - title: connect_socket
          description: The driver is capable of connecting to a socket-based data source.
        - title: connect_file
          description: The driver is capable of connecting to a file-based data source.
        - title: connect_uri
          description: The driver is capable of connecting to a data source using a URI.
        - title: read_only
          description: The driver is capable of opening a connection in read-only mode.
        - title: connect_ssl
          description: The driver is capable of connecting to a data source through SSL.

    Driver:
      description: A driver that can be used to connect to a datasource.
      type: object
      required:
        - name
        - label
        - icon
        - description
        - capabilities
        - defaults
      properties:
        name:
          type: string
          format: identifier
          description: The name of the driver (should be an identifier, e.g. "postgresql").
        label:
          type: string
          description: The label of the driver (should be human-readable, e.g. "PostgreSQL").
        icon:
          type: string
          description: The icon of the driver (should be a filename, e.g. "postgresql.svg").
        description:
          type: string
          description: The description of the driver.
        capabilities:
          type: array
          description: The capabilities of the driver.
          items:
            $ref: "#/components/schemas/DriverCapabilities"
        defaults:
          type: object
          description: The default connection settings of the driver.
          additionalProperties:
            type: string

    ConnectionDescription:
      description: Description of a connection to a datasource.
      type: object
      properties:
        description:
          type: string
          description: |
            The description of the connection (e.g. "Server version: 9.0.1 MySQL Community Server - GPL").
        server_version:
          type: string
          description: The version of the server (e.g. "9.0.1").

    Connection:
      description: Description of a connection to a datasource.
      type: object
      x-immerable: true
      required:
        - id
        - parent_id
        - owner_user_id
        - mode
        - name
        - save_password
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the connection.
        parent_id:
          type: string
          format: uuid
          description: The unique identifier of the parent resource in the catalog.

        owner_user_id:
          type: string
          format: uuid
          description: The unique identifier of the user that owns the connection.

        driver:
          type: string
          description: The name of the driver used to connect to the datasource.

        name:
          type: string
          description: The name of the connection.

        alias:
          type: string
          format: identifier
          description: The alias of the connection.

        description:
          type: string
          description: The description of the connection.

        mode:
          $ref: "#/components/schemas/ConnectionMode"

        host:
          type: string
          description: The host of the connection.if the connection mode is "host".

        port:
          type: integer
          format: int16
          minimum: 0
          description: The port of the connection.if the connection mode is "host".

        socket:
          type: string
          description: The socket of the connection.if the connection mode is "socket".

        file:
          type: string
          description: The file of the connection.if the connection mode is "file".

        connection_string:
          type: string
          description: The connection string of the connection.if the connection mode is "connection_string".

        uri:
          type: string
          description: The URI of the connection.if the connection mode is "uri".

        username:
          type: string
          description: The username for authentication.

        password:
          type: string
          description: The password for authentication.

        save_password:
          type: boolean
          description: Whether the password should be saved.

        datasource:
          type: string
          description: The name of the default datasource to use.

        options:
          type: object
          description: Additional options of the connection.
          additionalProperties:
            type: string

    ConnectionMode:
      description: The mode of a connection.
      type: string
      oneOf:
        - title: host
          description: The connection is a host-based connection.
        - title: socket
          description: The connection is a socket-based connection.
        - title: file
          description: The connection is a file-based connection.
        - title: connection_string
          description: The connection is a connection string-based connection.
        - title: uri
          description: The connection is a URI-based connection.

    ConnectionOption:
      description: Options for a connection.
      type: string
      oneOf:
        - title: read_only
          description: Opens the connection in read-only mode. Write will be prohibited.

    Error:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          description: The HTTP status code
          type: integer
        code:
          description: A machine readable error code such as `invalid_parameter`.
          type: string
        message:
          description: A human readable error message
          type: string

    RefreshToken:
      description: The request body of the POST /auth/refresh-token endpoint.
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token

    Rename:
      description: The request body of the POST /users/:username/catalog endpoint.
      type: object
      properties:
        new_name:
          type: string
      required:
        - new_name

    ResourceType:
      type: string
      oneOf:
        - title: connection
          description: A connection to a datasource.
        - title: environment
          description: An environment that can be used to group connections.
        - title: collection
          description: A collection of resources.
        - title: user
          description: A user.

    ResourceRef:
      description: |
        A reference to a resource.

        A resource reference is a lightweight object that contains the unique identifier of the resource, and some
        additional properties of the resource that are useful to use the resource without having to load it.
      type: object
      properties:
        id:
          description: Unique identifier of the resource.
          type: string
          format: uuid
        parent_id:
          description: Unique identifier of the parent resource.
          type: string
          format: uuid
        owner_user_id:
          description: Unique identifier of the user who own the resource.
          type: string
          format: uuid
        name:
          description: Name of the resource.
          type: string
        type:
          x-rust-name: resource_type
          $ref: "#/components/schemas/ResourceType"
        metadata:
          description: |
            Additional metadata of the resource.

            Metadata are key-value pairs that provide additional information without having to load the resource itself.
            For example, the content type of a `collection`, or the driver of a `connection`.
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - name
        - type

    SecurityTokens:
      description: A security token used for authentication.
      type: object
      required:
        - access_token
        - access_token_type
        - refresh_token
        - expires_in
        - user_id
        - client_id
        - session_id
      properties:
        access_token:
          description: The access token is a 256-bit random number encoded in hexadecimal.
          type: string
        access_token_type:
          description: The type of the access token (always "Bearer" for now)
          $ref: "#/components/schemas/TokenType"
        refresh_token:
          description: The refresh token is used to generate new security tokens.
          type: string
        expires_in:
          description: The number of seconds after which the access token will expire.
          type: integer
          format: int32
          minimum: 0
        user_id:
          description: The unique identifier of the user that the tokens belongs to.
          type: string
          format: uuid
        client_id:
          description: |
            The unique identifier of the client that requested the tokens.
            The `client_id` is used to identify the application that requested the tokens. This is useful for telemetry
            purposes, typically to track the usage of the application.
            The client_id is generated by the client application and is not validated by the server.
          type: string
          format: uuid
        session_id:
          description: |
            The unique identifier of the session that the tokens belongs to.
            Unlike the `access_token` and `refresh_token` this is not a security token but a session identifier. It is
            generated when the use logs on and discarded when the user logs out. If the client is disconnected and 
            reconnect, the `session_id` will be the same while the `access_token` and `refresh_token` will be different.
            The `session_id` is generated by the server.
          type: string
          format: uuid

    Username:
      description: A username
      type: string

    QueryExecutionStatus:
      description: The status of a query execution.
      type: string
      oneOf:
        - title: pending
          description: Waiting to be executed.
        - title: running
          description: Execution in progress.
        - title: completed
          description: Execution completed successfully.
        - title: failed
          description: Execution failed.
        - title: cancelled
          description: Execution was cancelled.
        - title: deleted
          description: Removed from the history.

    QueryExecutionError:
      description: An error message from a query execution.
      type: object
      properties:
        message:
          type: string
        line:
          type: integer
          format: int32
          minimum: 0
        column:
          type: integer
          format: int32
          minimum: 0

    QueryExecution:
      description: The execution of a query.
      type: object
      required:
        - id
        - revision
        - connection_id
        - user_id
        - text
        - hash
        - status
        - created_at
        - affected_rows
        - execution_time
        - origin
        - with_result_set
        - storage_bytes
        - storage_rows
      properties:
        id:
          description: The unique identifier of the query execution.
          type: string
          format: uuid
        revision:
          description: |
            The revision number of the query execution.

            The revision number is used to track the changes to the query execution. It is incremented each time the
            query execution is updated. Because the client receive updates of the query execution via different channels
            (HTTP and WebSocket) there is no guarantee that the last update received is the most recent. By using the
            revision number the client can avoid overwriting a more recent update with an older one.
            At creation the revision number is 0.
          type: integer
          format: int32
          minimum: 0
        connection_id:
          description: The unique identifier of the connection used to execute the query.
          type: string
          format: uuid
        user_id:
          description: The unique identifier of the user that executed the query.
          type: string
          format: uuid
        text:
          description: The text of the query.
          type: string
        hash:
          description: |
            The hash of the text of the query after normalization.

            The hash is used to determine if two queries are the same regardless of their formatting. The hash is 
            computed by normalizing the query into tokens.
          type: integer
          format: int64
          minimum: 0
        with_result_set:
          description: |
            A flag indicating if the query is a result set returning query.

            This flag is used to determine if the query execution may return the result set or not.

            Examples of result set returning queries are:
            - `SELECT``: The primary statement that retrieves rows from one or more tables.
            - `SHOW``: A statement that shows information about databases, tables, or other objects.
            - `INSERT ... RETURNING`: In some databases (like PostgreSQL), `INSERT``, `UPDATE``, and `DELETE`` can 
               return rows when combined with the `RETURNING` clause.
          type: boolean
        status:
          description: The status of the query execution.
          $ref: "#/components/schemas/QueryExecutionStatus"
        error:
          description: The error message if the query execution failed.
          $ref: "#/components/schemas/QueryExecutionError"
        executed_at:
          description: |
            The date and time when the query was executed.

            This is the time the query was submitted to the agent but the time when the query was submitted to the
            driver
          type: string
          format: date-time
        created_at:
          description: |
            The date and time when the query execution was created.

            This is the time when the query was submitted to the agent.
          type: string
          format: date-time
        affected_rows:
          description: The number of rows affected by the query.
          type: integer
          format: int64
          minimum: 0
        execution_time:
          description: |
            The time it took to execute the query in seconds.

            The time is captured in nanoseconds and converted to seconds using a 64-bit floating-point allowing for
            high precision on fast queries without loosing the ability to represent long running queries in seconds.
            This decision was made to keep that field usable in Javascript where the number type is a 64-bit 
            floating-point but can only represent integers up to 2^53 - 1 which would be only 2.5 hours in nanoseconds 
            before starting to loose precision. In addition seconds are more user friendly than nanoseconds.
          type: number
          format: double
          minimum: 0
        origin:
          description: |
            The origin of the query execution.

            The query can be originated from different origins like a terminal or a worksheet. In order to track the
            history of each of origin independently, the origin is stored in the query execution.

            Examples of origins are: `terminal`, `worksheet`, `e7ee76db-8758-4da4-bbce-242c8d1f3d63`, etc.
          type: string
        storage_bytes:
          description: The size of the result set on disk in bytes.
          type: integer
          format: int64
          minimum: 0
        storage_rows:
          description: The number of rows stored on disk.
          type: integer
          format: int64
          minimum: 0
        metadata:
          description: |
            A collection of key-value pairs that provide additional information about the query execution.

            - `schema`:
              The schema of the result set for queries with `with_result_set` set to `true`.
              The schema is a JSON representation of an Arrow schema using 
              [Apache Arrow JSON test data format](https://github.com/apache/arrow/blob/master/docs/source/format/Integration.rst#json-test-data-format)
              Having `with_result_set` set to `true` set to true doesn't guarantee that the schema will be present, the 
              schema is only present if the query execution was successful.
          type: object
          additionalProperties:
            type: string

    FieldStatistics:
      description: |
        The statistics about the data of a field across a result set.
      type: object
      required:
        - missing
      properties:
        min:
          description: |
            The minimum value of the attribute.
            Only present if the attribute has a numeric representation (this include date, datetime).
            The following [DataType](https://arrow.apache.org/docs/format/Columnar.html#data-type) are currently
            supported:
            - Int
            - Floating Point
            - Decimal
            - Date: The number of days since the UNIX epoch.
            - Time: A number since midnight (precision depending on the time unit of the field).
            - Timestamp: The number since the UNIX epoch (precision depending on the time unit of the field, always UTC).
            - Duration: A number (precision depending on the time unit of the field)
          type: number
          format: double
        max:
          description: The maximum value of the attribute (see `min` for supported data types).
          type: number
          format: double
        unique:
          description: The number of unique values in the attribute.
          type: integer
          format: int64
          minimum: 0
        missing:
          description: The number of missing values in the attribute.
          type: integer
          format: int64
          minimum: 0
        max_length:
          description: The maximum length of the attribute for `text` attributes.
          type: integer
          format: int32
          minimum: 0

    QueryHistoryPage:
      description: The response of the GET /connections/{id}/history/list endpoint.
      type: object
      required:
        - queries
      properties:
        queries:
          description: The list of queries in the history.
          type: array
          items:
            $ref: "#/components/schemas/QueryExecution"
        next_page:
          description: The pagination information for the next page.
          type: string

    TokenType:
      type: string
      enum:
        - bearer

    LogLevel:
      description: The level of the message sent through a the Push Notification Channel.
      type: string
      enum:
        - info
        - warning
        - error

    Log:
      description: A log message sent by the agent to the client through the Push Notification Channel.
      type: object
      required:
        - level
        - message
      properties:
        level:
          $ref: "#/components/schemas/LogLevel"
        message:
          description: The log message.
          type: string

    PushMessageType:
      description: |
        The type of a Push Notification.

        The type of the notification is used to determine the structure of the notification object.
        It could be either a message or a query execution.
      type: string
      enum:
        - log
        - query

    PushMessage:
      description: A Push Notification sent by the agent to the client through the Notification Channel.
      type: object
      required:
        - type
        - silent
      properties:
        silent:
          description: A flag indicating if the notification should be displayed to the user.
          type: boolean
        type:
          x-rust-name: message_type
          $ref: "#/components/schemas/PushMessageType"
        log:
          description: A info/warning/error log message if the type is `log`.
          $ref: "#/components/schemas/Log"
        query:
          description: An updated query execution if the type is `query`.
          $ref: "#/components/schemas/QueryExecution"

    SpecialCollection:
      description: A special collection in the catalog.
      type: string
      oneOf:
        - title: favorites
          description: The collection of favorite resources in the catalog for a given user.
        - title: trash
          description: The trash collection of the catalog for a given user.

    Collection:
      description: A collection resources stored in the catalog.
      type: object
      required:
        - collection_id
        - owner_user_id
        - name
      properties:
        collection_id:
          description: The unique identifier of the collection.
          type: string
          format: uuid
        owner_user_id:
          description: The unique identifier of the user that owns the collection.
          type: string
          format: uuid
        name:
          description: The name of the collection.
          type: string
        parent_id:
          description: The unique identifier of the parent resource in the catalog.
          type: string
          format: uuid
        resources_type:
          description: |
            The type of resources in the collection.
            If empty the collection can contain any type of resources.
          $ref: "#/components/schemas/ResourceType"
        special:
          description: The special collection type.
          $ref: "#/components/schemas/SpecialCollection"

    TableSettings:
      description: The settings of a table displaying a dataframe.
      type: object
      x-immerable: true
      required:
        - show_row_numbers
        - density
        - dividers
        - overscan
        - null_values
        - max_length
      properties:
        show_row_numbers:
          description: Show the row numbers in the table.
          type: boolean
        density:
          description: The density of the table.
          $ref: "#/components/schemas/TableDensity"
        dividers:
          description: The dividers between columns & rows in the table.
          $ref: "#/components/schemas/TableDividers"
        overscan:
          description: The overscan of the table.
          $ref: "#/components/schemas/TableOverscan"
        null_values:
          description: The visual representation of null values.
          $ref: "#/components/schemas/NullValues"
        max_length:
          description: The maximum number of characters to display in a column.
          type: integer
          format: int16
          minimum: 0

    TableDensity:
      description: The density of a table.
      type: string
      enum:
        - compact
        - comfortable

    TableDividers:
      description: The dividers between columns & rows in a table.
      type: string
      oneOf:
        - title: none
          description: No dividers between columns & rows.
        - title: rows
          description: Dividers between rows only.
        - title: grid
          description: Dividers between columns & rows.

    TableOverscan:
      description: The overscan of a table.
      type: string
      oneOf:
        - title: small
          description: small - The overscan is 5 rows, 1 column.
        - title: medium
          description: medium - The overscan is 25 rows, 3 columns.
        - title: large
          description: large - The overscan is 125 rows, 9 columns.

    NullValues:
      description: The visual representation of null values.
      type: string
      enum:
        - null_lowercase
        - null_uppercase
        - empty
        - dash
        - not_available_lowercase
        - not_available_uppercase

    MonacoEditorSettings:
      description: The settings of the Monaco Editor used by the terminal, worksheet, etc.
      type: object
      x-immerable: true
      required:
        - minimap
        - whitespace
        - cursor_style
        - match_brackets
      properties:
        minimap:
          description: The minimap visibility of the Monaco Editor.
          $ref: "#/components/schemas/MonacoEditorMinimap"
        whitespace:
          description: The whitespace rendering of the Monaco Editor.
          $ref: "#/components/schemas/MonacoEditorWhitespace"
        cursor_style:
          description: The cursor style of the Monaco Editor.
          $ref: "#/components/schemas/MonacoEditorCursorStyle"
        match_brackets:
          description: The match brackets setting of the Monaco Editor.
          $ref: "#/components/schemas/MonacoEditorMatchBrackets"

    MonacoEditorMinimap:
      description: The minimap visibility of the Monaco Editor.
      type: string
      enum:
        - show
        - hide
        - auto

    MonacoEditorWhitespace:
      description: The whitespace rendering of the Monaco Editor.
      type: string
      enum:
        - none
        - boundary
        - selection
        - all
        - trailing

    MonacoEditorCursorStyle:
      description: The cursor style of the Monaco Editor.
      type: string
      enum:
        - line
        - block
        - underline
        - line_thin
        - block_outline
        - underline_thin

    MonacoEditorMatchBrackets:
      description: The match brackets setting of the Monaco Editor.
      type: string
      enum:
        - always
        - never
        - near

    HistorySettings:
      description: The settings of the history view.
      type: object
      x-immerable: true
      required:
        - max_entries
        - max_age
        - max_storage
        - max_rows
        - table_settings
      properties:
        max_entries:
          description: The maximum number of entries in the history.
          type: integer
          format: int16
          minimum: 0
        max_age:
          description: The maximum age of the entries in the history (in days).
          type: integer
          format: int16
          minimum: 0
        max_storage:
          description: The maximum storage of the history (in megabytes).
          type: integer
          format: int64
          minimum: 0
        max_rows:
          description: The maximum number of rows to display in the result set.
          type: integer
          format: int16
          minimum: 5
        table_settings:
          description: The settings of the table displaying the result set.
          type: object
          $ref: "#/components/schemas/TableSettings"

    TerminalSettings:
      description: The settings of a terminal.
      type: object
      x-immerable: true
      required:
        - editor_settings
      properties:
        editor_settings:
          description: The settings of the Monaco Editor used by the history view.
          type: object
          $ref: "#/components/schemas/MonacoEditorSettings"

    ColorScheme:
      description: The color scheme of the application.
      type: string
      enum:
        - light
        - dark
        - auto

    UserSettings:
      description: The settings of a user.
      type: object
      x-immerable: true
      required:
        - color_scheme
        - telemetry
        - show_favorites
        - null_values
        - terminal_settings
        - history_settings
        - editor_settings
      properties:
        telemetry:
          description: Enable/Disable the telemetry.
          type: boolean
        show_favorites:
          description: Show the favorites in the catalog.
          type: boolean
        color_scheme:
          description: The color scheme of the application.
          $ref: "#/components/schemas/ColorScheme"
        terminal_settings:
          description: The settings of the terminal.
          $ref: "#/components/schemas/TerminalSettings"
        history_settings:
          description: The settings of the history view.
          $ref: "#/components/schemas/HistorySettings"
        null_values:
          description: The visual representation of null values.
          $ref: "#/components/schemas/NullValues"
        editor_settings:
          description: The settings of the Monaco Editor used by worksheet and files.
          type: object
          $ref: "#/components/schemas/MonacoEditorSettings"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key

    BearerAuth:
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: []
  - BearerAuth: []
