openapi: "3.0.0"
info:
  version: "0.1.0"
  title: "Squill Agent REST API"
  description: The REST API used by the Squill Client to interact with the Agent.

paths:
  /agent:
    get:
      summary: Agent info.
      description: Get the information about the running agent.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "401":
          description: Unauthorized

  /auth/logon:
    post:
      summary: Logon a user.
      description: |
        Logon a user and returns an authentication token.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityTokens"
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout a user.
      description: |
        This endpoint is used to logout a user, i.e. to invalidate the security and refresh tokens.
        While the Authorization header is required, this endpoint will not return a 403 Forbidden if the
        tokens are invalid or expired. Instead, it will return a 200 OK since the goal is only to 
        invalidate the tokens. Nevertheless if the `Authorization` header is missing or syntactically
        wrong, a 400 Bad Request will be returned.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized

  /auth/refresh-token:
    post:
      summary: Generate a new security token from a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityTokens"
        "401":
          description: Unauthorized

  /connections/defaults:
    get:
      summary: Get a connection defaults values.
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

  /connections/{id}:
    get:
      summary: Get a connection from its identifier.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"

        "401":
          description: Unauthorized

        "404":
          description: Connection not found

  /connections/{id}/execute:
    post:
      summary: Execute one or more queries on the connection.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          plain/text:
            schema:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "401":
          description: Unauthorized

  /connections/{id}/history:
    get:
      summary: Get the history of the connection.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueryExecution"
        "401":
          description: Unauthorized

  /connections/test:
    post:
      summary: Test a connection.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connection"
      responses:
        "200":
          description: Successful operation
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/list:
    get:
      summary: List all catalog entries for the specified `username` and `catalog_id`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "404":
          description: Catalog ID not found
        "401":
          description: Unauthorized

  /users/{username}/catalog/list:
    get:
      summary: List all root catalog entries for the specified `username`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog:
    post:
      summary: Create a new resource in the catalog.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: x-resource-type
          in: header
          required: true
          schema:
            enum:
              - connection
              - environment
              - folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Connection"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "401":
          description: Unauthorized

  /users/{username}/catalog/{catalog_id}/rename:
    post:
      summary: Rename a catalog entry for the specified `username` and `path`.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
        - name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRef"
        "400":
          description: Invalid Request
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Catalog entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable Entity

  /users/{username}/settings:
    post:
      summary: Save the user settings.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Path not found
        "401":
          description: Unauthorized

  /users/{username}/user:
    get:
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "401":
          description: Unauthorized

components:
  schemas:
    Agent:
      description: Description of the agent.
      type: object
      required:
        - version
      properties:
        version:
          type: string

    AuthenticationMethod:
      type: string
      enum:
        - user_password

    Authentication:
      type: object
      required:
        - method
        - credentials
      properties:
        method:
          $ref: "#/components/schemas/AuthenticationMethod"
        credentials:
          $ref: "#/components/schemas/Credentials"

    Credentials:
      description: The credentials used to authenticate a user.
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          type: string
      required:
        - username

    User:
      description: A user that can logon to the system.
      type: object
      required:
        - username
      properties:
        username:
          type: string

    Connection:
      description: A connection to a datasource.
      type: object
      required:
        - id
      properties:
        id:
          type: string

    Error:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          description: The HTTP status code
          type: number
        code:
          description: A machine readable error code such as `invalid_parameter`.
          type: string
        message:
          description: A human readable error message
          type: string

    RefreshToken:
      description: The request body of the POST /auth/refresh-token endpoint.
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token

    Rename:
      description: The request body of the POST /users/:username/catalog endpoint.
      type: object
      properties:
        new_name:
          type: string
      required:
        - new_name

    ResourceType:
      type: string
      enum:
        - connection
        - environment
        - folder
        - user

    ResourceRef:
      description: A reference to a resource.
      type: object
      properties:
        id:
          type: string
          format: uuid
        parent_id:
          type: string
          format: uuid
        owner_user_id:
          type: string
          format: uuid
        name:
          type: string
        resource_type:
          type: string
          enum:
            - connection
            - environment
            - folder
            - user
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - owner_user_id
        - name

    SecurityTokens:
      description: A security token used for authentication.
      type: object
      required:
        - access_token
        - access_token_type
        - refresh_token
        - expires_in
        - user_id
        - client_id
        - session_id
      properties:
        access_token:
          description: The access token is a 256-bit random number encoded in hexadecimal.
          type: string
        access_token_type:
          description: The type of the access token (always "Bearer" for now)
          $ref: "#/components/schemas/TokenType"
        refresh_token:
          description: The refresh token is used to generate new security tokens.
          type: string
        expires_in:
          description: The number of seconds after which the access token will expire.
          type: number
          format: int32
          minimum: 0
        user_id:
          description: The unique identifier of the user that the tokens belongs to.
          type: string
          format: uuid
        client_id:
          description: |
            The unique identifier of the client that requested the tokens.
            The `client_id` is used to identify the application that requested the tokens. This is useful for telemetry
            purposes, typically to track the usage of the application.
            The client_id is generated by the client application and is not validated by the server.
          type: string
          format: uuid
        session_id:
          description: |
            The unique identifier of the session that the tokens belongs to.
            Unlike the `access_token` and `refresh_token` this is not a security token but a session identifier. It is
            generated when the use logs on and discarded when the user logs out. If the client is disconnected and 
            reconnect, the `session_id` will be the same while the `access_token` and `refresh_token` will be different.
            The `session_id` is generated by the server.
          type: string
          format: uuid

    Username:
      description: A username
      type: string

    QueryExecutionStatus:
      description: The status of a query execution.
      type: string
      enum:
        - pending
        - running
        - completed
        - failed
        - cancelled

    QueryExecutionError:
      description: An error message from a query execution.
      type: object
      properties:
        message:
          type: string
        line:
          type: number
          format: int32
          minimum: 0
        column:
          type: number
          format: int32
          minimum: 0

    QueryExecution:
      description: The execution of a query.
      type: object
      required:
        - id
        - revision
        - connection_id
        - user_id
        - query
        - status
        - created_at
        - affected_rows
        - execution_time
      properties:
        id:
          description: The unique identifier of the query execution.
          type: string
          format: uuid
        revision:
          description: |
            The revision number of the query execution.

            The revision number is used to track the changes to the query execution. It is incremented each time the
            query execution is updated. Because the client receive updates of the query execution via different channels
            (HTTP and WebSocket) there is no guarantee that the last update received is the most recent. By using the
            revision number the client can avoid overwriting a more recent update with an older one.
          type: number
          format: int32
          minimum: 0
        connection_id:
          description: The unique identifier of the connection used to execute the query.
          type: string
          format: uuid
        user_id:
          description: The unique identifier of the user that executed the query.
          type: string
          format: uuid
        query:
          description: The query that was executed.
          type: string
        is_result_set_query:
          description: |
            A flag indicating if the query is a result set returning query.

            This flag is used to determine if the query execution may return the result set or not.

            Examples of result set returning queries are:
            - `SELECT``: The primary statement that retrieves rows from one or more tables.
            - `SHOW``: A statement that shows information about databases, tables, or other objects.
            - `INSERT ... RETURNING`: In some databases (like PostgreSQL), `INSERT``, `UPDATE``, and `DELETE`` can 
               return rows when combined with the `RETURNING` clause.
          type: boolean
        status:
          description: The status of the query execution.
          $ref: "#/components/schemas/QueryExecutionStatus"
        error:
          description: The error message if the query execution failed.
          $ref: "#/components/schemas/QueryExecutionError"
        executed_at:
          description: |
            The date and time when the query was executed.

            This is the time the query was submitted to the agent but the time when the query was submitted to the
            driver
          type: string
          format: date-time
        created_at:
          description: |
            The date and time when the query execution was created.

            This is the time when the query was submitted to the agent.
          type: string
          format: date-time
        affected_rows:
          description: The number of rows affected by the query.
          type: number
          format: int64
          minimum: 0
        execution_time:
          description: |
            The time it took to execute the query in seconds.

            The time is captured in nanoseconds and converted to seconds using a 64-bit floating-point allowing for
            high precision on fast queries without loosing the ability to represent long running queries in seconds.
            This decision was made to keep that field usable in Javascript where the number type is a 64-bit 
            floating-point but can only represent integers up to 2^53 - 1 which would be only 2.5 hours in nanoseconds 
            before starting to loose precision. In addition seconds are more user friendly than nanoseconds.
          type: number
          format: double
          minimum: 0

    TokenType:
      type: string
      enum:
        - bearer

    LogLevel:
      description: The level of the message sent through a the Push Notification Channel.
      type: string
      enum:
        - info
        - warning
        - error

    Log:
      description: A log message sent by the agent to the client through the Push Notification Channel.
      type: object
      required:
        - level
        - message
      properties:
        level:
          $ref: "#/components/schemas/LogLevel"
        message:
          description: The log message.
          type: string

    PushMessageType:
      description: |
        The type of a Push Notification.

        The type of the notification is used to determine the structure of the notification object.
        It could be either a message or a query execution.
      type: string
      enum:
        - log
        - query

    PushMessage:
      description: A Push Notification sent by the agent to the client through the Notification Channel.
      type: object
      required:
        - type
        - silent
      properties:
        silent:
          description: A flag indicating if the notification should be displayed to the user.
          type: boolean
        type:
          x-rust-name: message_type
          $ref: "#/components/schemas/PushMessageType"
        log:
          description: A info/warning/error log message if the type is `log`.
          $ref: "#/components/schemas/Log"
        query:
          description: An updated query execution if the type is `query`.
          $ref: "#/components/schemas/QueryExecution"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key

    BearerAuth:
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: []
  - BearerAuth: []
