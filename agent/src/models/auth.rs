/*********************************************************************
 * THIS CODE IS GENERATED FROM API.YAML BY BUILD.RS, DO NOT MODIFY IT.
 *********************************************************************/
use serde::{Deserialize, Serialize};
use squill_drivers::serde::Decode;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum AuthenticationMethod {
    UserPassword,
}

/// Convert AuthenticationMethod to a `&str`.
impl AsRef<str> for AuthenticationMethod {
    fn as_ref(&self) -> &str {
        match self {
            AuthenticationMethod::UserPassword => "user_password",
        }
    }
}

/// Convert AuthenticationMethod to a string.
impl std::fmt::Display for AuthenticationMethod {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_ref())
    }
}

/// Convert a `&str` to a AuthenticationMethod.
impl TryFrom<&str> for AuthenticationMethod {
    type Error = anyhow::Error;

    fn try_from(s: &str) -> Result<Self, anyhow::Error> {
        match s {
            "user_password" => Ok(AuthenticationMethod::UserPassword),
            _ => Err(anyhow::anyhow!("Unexpected value: '{}'.", s)),
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum TokenType {
    Bearer,
}

/// Convert TokenType to a `&str`.
impl AsRef<str> for TokenType {
    fn as_ref(&self) -> &str {
        match self {
            TokenType::Bearer => "bearer",
        }
    }
}

/// Convert TokenType to a string.
impl std::fmt::Display for TokenType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_ref())
    }
}

/// Convert a `&str` to a TokenType.
impl TryFrom<&str> for TokenType {
    type Error = anyhow::Error;

    fn try_from(s: &str) -> Result<Self, anyhow::Error> {
        match s {
            "bearer" => Ok(TokenType::Bearer),
            _ => Err(anyhow::anyhow!("Unexpected value: '{}'.", s)),
        }
    }
}

/// A username
pub type Username = String;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Decode)]
pub struct Authentication {
    pub credentials: Credentials,

    pub method: AuthenticationMethod,
}

/// The credentials used to authenticate a user.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Decode)]
pub struct Credentials {
    #[serde(default, skip_serializing_if = "String::is_empty")]
    pub password: String,

    pub username: Username,
}

/// A security token used for authentication.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Decode)]
pub struct SecurityTokens {
    /// The access token is a 256-bit random number encoded in hexadecimal.
    pub access_token: String,

    /// The type of the access token (always "Bearer" for now)
    pub access_token_type: TokenType,

    /// The unique identifier of the client that requested the tokens.
    /// The `client_id` is used to identify the application that requested the tokens. This is useful for telemetry
    /// purposes, typically to track the usage of the application.
    /// The client_id is generated by the client application and is not validated by the server.
    pub client_id: uuid::Uuid,

    /// The number of seconds after which the access token will expire.
    pub expires_in: u32,

    /// The refresh token is used to generate new security tokens.
    pub refresh_token: String,

    /// The unique identifier of the session that the tokens belongs to.
    /// Unlike the `access_token` and `refresh_token` this is not a security token but a session identifier. It is
    /// generated when the use logs on and discarded when the user logs out. If the client is disconnected and
    /// reconnect, the `session_id` will be the same while the `access_token` and `refresh_token` will be different.
    /// The `session_id` is generated by the server.
    pub session_id: uuid::Uuid,

    /// The unique identifier of the user that the tokens belongs to.
    pub user_id: uuid::Uuid,
}

/// The request body of the POST /auth/refresh-token endpoint.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Decode)]
pub struct RefreshToken {
    pub refresh_token: String,
}
