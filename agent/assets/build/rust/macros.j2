{% macro enum(name, schema) %}
{% if schema.description %}
/// {{ schema.description | trim | replace('\n', '\n  /// ') }}
{%- endif %}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum {{ name | pascal_case }} {
    {% if schema.enum is defined %}
      {%- for value in schema.enum %}
    {{ value | pascal_case }},
      {%- endfor %}
    {% elif schema.oneOf is defined %}
      {%- for value in schema.oneOf %}
    {% if value.description %}
    /// {{ value.description | trim | replace('\n', '\n  /// ') }}
    {%- endif %}
    {{ value.title | pascal_case }},
      {%- endfor %}
    {% endif %}
}
{% endmacro %}

{% macro type(name, schema) %}
{% if schema.description %}
/// {{ schema.description | trim | replace('\n', '\n  /// ') }}
{%- endif %}
pub type {{ name | pascal_case }} = {{ rust_type(schema) }};
{% endmacro %}

{% macro rust_type(field) %}
  {%- if field.format == "uuid" -%}
    uuid::Uuid
  {%- elif field.format == "date-time" -%}
    chrono::DateTime<chrono::Utc>
  {%- elif field.format == "int64" and field.type == "integer" and field.minimum == 0 -%}
    u64
  {%- elif field.format == "int64" and field.type == "integer" -%}
    i64
  {%- elif field.format == "int32" and field.type == "integer" and field.minimum == 0 -%}
    u32
  {%- elif field.format == "int32" and field.type == "integer" -%}
    i32
  {%- elif field.format == "int16" and field.type == "integer" and field.minimum == 0 -%}
    u16
  {%- elif field.format == "int16" and field.type == "integer" -%}
    i16
  {%- elif field.format == "float" -%}
    f32
  {%- elif field.format == "double" -%}
    f64
  {%- elif field.format == "identifier" -%}
    String
  {%- elif field["$ref"] -%}
    {{ field["$ref"] | replace('#/components/schemas/', '') }}
  {%- elif field.type == "object" and field.additionalProperties is defined -%}
    HashMap<String, {{ rust_type(field.additionalProperties) }}>
  {%- elif field.format is not defined and field.type == "string" -%}
    String
  {%- elif field.type == "boolean" -%}
    bool
  {%- elif field.type == "array" -%}
    Vec<{{ rust_type(field.items) }}>
  {%- else -%}
    __NOT_SUPPORTED__ (properties: {{field}})
  {%- endif -%}
{% endmacro %}

{% macro rust_field_name(name, field) %}
  {%- if field["x-rust-name"] is defined -%}
    {{ field["x-rust-name"] }}
  {%- else -%}
    {{ name }}
  {%- endif -%}
{% endmacro %}

{% macro struct(name, schema) %}
{% if schema.description %}
/// {{ schema.description | trim | replace('\n', '\n  /// ') }}
{%- endif %}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct {{ name | pascal_case }} {
  {% for key in schema.properties %}
  {%- set field = schema.properties[key] %}
  {%- set field_name = rust_field_name(key, field) %}
  {%- set field_rust_type = rust_type(field) %}
  {% if field_rust_type == name | pascal_case %}
    {%- set field_rust_type = "Box<" ~ field_rust_type ~ ">" %}
  {%- endif %}
  {% if field.description %}
  /// {{ field.description | trim | replace('\n', '\n  /// ') }}
  {%- endif %}
  {%- if key != field_name %}
  #[serde(rename = "{{ key }}")]
  {%- endif %}
  {%- if schema.required is defined and key in schema.required %}
  pub {{ field_name }}: {{ field_rust_type }},
  {% elif field_rust_type == "String" %}
  #[serde(default, skip_serializing_if = "String::is_empty")]
  pub {{ field_name }}: {{ field_rust_type }},
  {% elif field_rust_type == "uuid::Uuid" %}
  #[serde(default, skip_serializing_if = "uuid::Uuid::is_nil")]
  pub {{ field_name }}: {{ field_rust_type }},
  {% elif field.type == "array" %}
  #[serde(default, skip_serializing_if = "Vec::is_empty")]
  pub {{ field_name }}: {{ field_rust_type }},
  {% elif field.type == "object" and field.additionalProperties is defined %}
  #[serde(default, skip_serializing_if = "HashMap::is_empty")]
  pub {{ field_name }}: {{ field_rust_type }},
  {% else %}
  #[serde(default, skip_serializing_if = "Option::is_none")]
  pub {{ field_name }}: Option<{{ field_rust_type }}>,
  {% endif %}
  {%- endfor %}
}
{% endmacro %}
