{% from "rust/macros" import enum, struct %}
/*********************************************************************
 * THIS CODE IS GENERATED FROM API.YAML BY BUILD.RS, DO NOT MODIFY IT.
 *********************************************************************/
use serde::{Deserialize, Serialize};
use squill_drivers::serde::Decode;

{{ enum("QueryExecutionStatus", components.schemas.QueryExecutionStatus) }}

impl QueryExecutionStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            QueryExecutionStatus::Pending => "pending",
            QueryExecutionStatus::Running => "running",
            QueryExecutionStatus::Completed => "completed",
            QueryExecutionStatus::Failed => "failed",
            QueryExecutionStatus::Cancelled => "cancelled",
        }
    }
}

impl TryFrom<&str> for QueryExecutionStatus {
    type Error = String;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "pending" => Ok(QueryExecutionStatus::Pending),
            "running" => Ok(QueryExecutionStatus::Running),
            "completed" => Ok(QueryExecutionStatus::Completed),
            "failed" => Ok(QueryExecutionStatus::Failed),
            "cancelled" => Ok(QueryExecutionStatus::Cancelled),
            _ => Err(format!("Invalid status: {}", value)),
        }
    }
}

{{ struct("QueryExecutionError", components.schemas.QueryExecutionError) }}
{{ struct("QueryExecution", components.schemas.QueryExecution) }}
